/**
 * an Al Naiyr production, all right reserved. Une production Al naiyr, tous
 * droits réservés
 */
package com.alnaiyr.loading;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;

import javax.tools.JavaCompiler;
import javax.tools.StandardJavaFileManager;
import javax.tools.StandardLocation;
import javax.tools.ToolProvider;

/**
 * @author IgoЯ
 * @version 1.0
 *          <p>
 *          <Strong>Version Change:</Strong>
 *          <ul>
 *          <li><em>No Changes</em></li>
 *          </ul>
 */
public final class RessourceEnumerationCompiler {

	/*---------------------
	 * 
	 * Methods
	 * 
	 *----------------------*/

	/**
	 * Compile datas into an enum, made to stores values for the entire program.
	 * 
	 * @param packag
	 *            the package that will contain the enum
	 * @param category
	 *            the category of this enum, like General,Title,Menu,...
	 * @param type
	 *            the type of datas stored inside, like Image, Animation,
	 *            SpriteSheet,...
	 * @param copySources
	 *            do we need to create the source files
	 * @param sourceF
	 *            sourcefile main file for this enum, null if not needed
	 */
	public static void compileDataEnum(String packag, String category,
			String type, String typePackage, boolean copySources,
			String sourceF, String... names) {

		try {
			// create the source
			File tempFile = new File("temp/" + category + type + ".java");
			FileWriter writer;

			StringBuilder builder = new StringBuilder();

			RessourceEnumerationCompiler.appendCode(builder, packag,
					typePackage, type, category, names);

			writer = new FileWriter(tempFile);

			writer.write(builder.toString());
			writer.close();

			RessourceEnumerationCompiler.compile(tempFile, packag);

			if (copySources) {
				File sources = new File(sourceF + "/"
						+ packag.replace(".", "/") + "/" + category + type
						+ ".java");
				writer = new FileWriter(sources);
				writer.write(builder.toString());
				writer.close();
			}
			tempFile.deleteOnExit();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private static void appendCode(StringBuilder builder, String packag,
			String typePackage, String type, String category, String[] names) {

		String disclamer = "/** an Al Naiyr production, all right reserved. Une production Al naiyr, tous droits réservés*/ \n";
		String packageDecl = "package ";
		String importing = "import ";
		String classComment = "/** \n *@autogenerated\n *@author IgoЯ \n *@version 1.0\n */\n";
		String classDeclare = "public enum ";
		String variableDecl = "public ";

		builder.append(disclamer);
		builder.append(packageDecl);
		builder.append(packag);
		builder.append(";\n");
		builder.append(importing);
		builder.append(typePackage);
		builder.append(type);
		builder.append(";\n");
		builder.append(classComment);
		builder.append(classDeclare);
		builder.append(category);
		builder.append(type);
		builder.append("{\n");
		for (String str : names) {
			builder.append(" ");
			builder.append(str);
			builder.append(",\n");
		}
		builder.deleteCharAt(builder.length() - 1);
		builder.deleteCharAt(builder.length() - 1);
		builder.append("; \n\n");
		builder.append(variableDecl);
		builder.append(type);
		builder.append(" ");
		builder.append(type.toLowerCase());
		builder.append("; \n\n\n}\n");
	}

	private static void compile(File tempFile, String packag) {

		try {
			JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
			StandardJavaFileManager fileManager = compiler
					.getStandardFileManager(null, null,
							Charset.forName("UTF-8"));

			fileManager.setLocation(StandardLocation.CLASS_OUTPUT,
					Arrays.asList(new File("bin/" + packag.replace(".", "/"))));

			// Compile the file
			compiler.getTask(
					null,
					fileManager,
					null,
					null,
					null,
					fileManager.getJavaFileObjectsFromFiles(Arrays
							.asList(tempFile))).call();

			fileManager.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/*---------------------
	 * 
	 * Getters / Setters
	 * 
	 *----------------------*/
}
