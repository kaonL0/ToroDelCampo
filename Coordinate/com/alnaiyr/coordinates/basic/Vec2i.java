package com.alnaiyr.coordinates.basic;

import java.io.Serializable;

import org.jbox2d.common.MathUtils;
import org.jbox2d.common.Settings;
import org.jbox2d.common.Vec2;

import com.alnaiyr.coordinates.PlanVector;

/**
 * A 2D integer column vector
 * 
 * @author IgoR
 */
public class Vec2i implements Serializable, PlanVector {
	private static final long serialVersionUID = 1L;

	public int x, y;

	public Vec2i() {
		this(0, 0);
	}

	public Vec2i(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public Vec2i(PlanVector center) {
		this((int) center.x(), (int) center.y());
	}

	/** Zero out this vector. */
	public final void setZero() {
		x = 0;
		y = 0;
	}

	/** Set the vector component-wise. */
	@Override
	public final PlanVector set(float x, float y) {
		this.x = (int) x;
		this.y = (int) y;
		return this;
	}

	/** Set this vector to another vector. */
	@Override
	public final Vec2i set(PlanVector v) {
		this.x = (int) v.x();
		this.y = (int) v.y();
		return this;
	}

	/** Return the sum of this vector and another; does not alter either one. */
	public final Vec2 add(PlanVector coordinate) {
		return new Vec2(x + coordinate.x(), y + coordinate.y());
	}

	/**
	 * Return the difference of this vector and another; does not alter either
	 * one.
	 */
	public final Vec2 sub(Vec2 v) {
		return new Vec2(x - v.x, y - v.y);
	}

	/** Return this vector multiplied by a scalar; does not alter this vector. */
	public final Vec2 mul(float a) {
		return new Vec2(x * a, y * a);
	}

	/** Return the negation of this vector; does not alter this vector. */
	public final PlanVector negate() {
		return new Vec2(-x, -y);
	}

	/** Flip the vector and return it - alters this vector. */
	@Override
	public final Vec2i negateLocal() {
		x = -x;
		y = -y;
		return this;
	}

	/** Add another vector to this one and returns result - alters this vector. */
	@Override
	public final PlanVector addLocal(PlanVector v) {
		x += v.x();
		y += v.y();
		return this;
	}

	/** Adds values to this vector and returns result - alters this vector. */
	public final PlanVector addLocal(float x, float y) {
		this.x += x;
		this.y += y;
		return this;
	}

	/**
	 * Subtract another vector from this one and return result - alters this
	 * vector.
	 */
	@Override
	public final PlanVector subLocal(PlanVector v) {
		x -= v.x();
		y -= v.y();
		return this;
	}

	/** Multiply this vector by a number and return result - alters this vector. */
	@Override
	public final PlanVector mulLocal(float a) {
		x *= a;
		y *= a;
		return this;
	}

	/** Get the skew vector such that dot(skew_vec, other) == cross(vec, other) */
	public final PlanVector skew() {
		return new Vec2(-y, x);
	}

	/** Get the skew vector such that dot(skew_vec, other) == cross(vec, other) */
	public final void skew(Vec2 out) {
		out.x = -y;
		out.y = x;
	}

	/** Return the length of this vector. */
	@Override
	public final float length() {
		return MathUtils.sqrt(x * x + y * y);
	}

	/** Return the squared length of this vector. */
	@Override
	public final float lengthSquared() {
		return x * x + y * y;
	}

	/**
	 * Normalize this vector and return the length before normalization. Alters
	 * this vector.
	 */
	@Override
	public final float normalize() {
		float length = length();
		if (length < Settings.EPSILON) {
			return 0f;
		}

		float invLength = 1.0f / length;
		x *= invLength;
		y *= invLength;
		return length;
	}

	/**
	 * True if the vector represents a pair of valid, non-infinite floating
	 * point numbers.
	 */
	public final boolean isValid() {
		return !Float.isNaN(x) && !Float.isInfinite(x) && !Float.isNaN(y)
				&& !Float.isInfinite(y);
	}

	/** Return a new vector that has positive components. */
	public final PlanVector abs() {
		return new Vec2(MathUtils.abs(x), MathUtils.abs(y));
	}

	public final void absLocal() {
		x = MathUtils.abs(x);
		y = MathUtils.abs(y);
	}

	@Override
	public final String toString() {
		return "(" + x + "," + y + ")";
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() { // automatically generated by Eclipse
		final int prime = 31;
		int result = 1;
		result = prime * result + Float.floatToIntBits(x);
		result = prime * result + Float.floatToIntBits(y);
		return result;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) { // automatically generated by Eclipse
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Vec2 other = (Vec2) obj;
		if (Float.floatToIntBits(x) != Float.floatToIntBits(other.x))
			return false;
		if (Float.floatToIntBits(y) != Float.floatToIntBits(other.y))
			return false;
		return true;
	}

	@Override
	public float x() {
		return x;
	}

	@Override
	public float y() {
		return y;
	}

	@Override
	public void setLocal(float x, float y) {
		this.x = (int) x;
		this.y = (int) y;
	}

	@Override
	public float angle() {
		return 0;// (float) Math.atan2(y, x);
	}

	@Override
	public PlanVector clone() {

		return new Vec2(x, y);
	}

}
